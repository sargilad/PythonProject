import CSDS_Monitor_dataCenter
import reporter

__author__ = 'ronens'
import http.client
import json
import configparser
import time
from threading import Thread
import calendar


# Init data center selectors
config = configparser.ConfigParser()
config.read('CSDS_Monitor_Environment.ini')
selectionList = config.sections()
dataCenters = []
for dc in selectionList:
    dcObj = CSDS_Monitor_dataCenter.DataCenter(config.get(dc, 'csdsDomain'), config.get(dc, 'dcName'))
    dataCenters.append(dcObj)

# Environment variables
siteId = config.get('DEFAULT', 'siteId')
csdsUri = '/api/account/' + siteId + '/service/baseURI.json?version=1.0'
timeout = config.getfloat('DEFAULT', 'timeout')
retryTimeout = config.getfloat('DEFAULT', 'retryTimeout')
serviceName = config.get('DEFAULT', 'serviceName')

# Init logging
logPath = config.get('DEFAULT', 'logFilePath')
str(logPath).strip()
logFileSize = config.getint('DEFAULT', 'logFileSize')
logFileBackupCount = config.getint('DEFAULT', 'logFileBackupCount')
log = reporter.Reporter('CSDS',logPath,logFileSize,logFileBackupCount)
errorMessageList = []


def sendRequest(dc):
    status = 1
    counter = 0

    while (status != 0) and (counter < 4):

        if (status != 0) and (counter > 0):
            time.sleep(retryTimeout)
        # Send CSDS request.
        try:
            status = 0
            counter += 1
            conn = http.client.HTTPConnection(dc.domain, None, timeout)
            conn.request("GET", csdsUri)
            response = conn.getresponse()
            # Validate CSDS request response code.
            responseCode = response.status
            responseData = response.read().decode("utf-8")
            if responseCode != 200:
                status = 1
                description = 'CSDS request fail with response code - ' + str(responseCode) + ";" + responseData
                errorMessage = str(calendar.timegm(time.gmtime())) + ',' + serviceName + ',' + dc.domain + ',' + dc.dcName + ',' + str(
                    status) + ',' + description.replace(",",";") + ' ;request URL = ' +dc.domain + csdsUri
                print(errorMessage)
                errorMessageList.append(errorMessage)
                continue
            # Response data validation
            elif responseCode == 200:
                responseJson = json.loads(responseData)
                services = responseJson['baseURIs']
                for item in services:
                    if item['baseURI'] == None:
                        status = 1
                        description = "Empty domain for service - " + item['service']
                        errorMessage = str(calendar.timegm(time.gmtime())) + ',' + serviceName + ',' + dc.domain + ',' + dc.dcName + ',' + str(
                            status) + ',' + description.replace(",",";") + ' ;request URL = ' + dc.domain + csdsUri
                        print(errorMessage)
                        errorMessageList.append(errorMessage)
                        continue

            print(str(calendar.timegm(time.gmtime())) + ',' + serviceName + ',' + dc.domain + ',' + dc.dcName + ',' + str(
                status) + ',' + 'CSDS request succeeded.')

        except Exception as e:
            status = 1
            errorMessage = str(calendar.timegm(time.gmtime())) + ',' + serviceName + ',' + dc.domain + ',' + dc.dcName + ',' + str(status) + ',' + str(
                e).replace(",",";") + ' ;request URL = ' +dc.domain + csdsUri
            print(errorMessage)
            errorMessageList.append(errorMessage)

for dc in dataCenters:
    threads = []
    t = Thread(target=sendRequest, args=(dc,))
    t.start()
    threads.append(t)
for t in threads:
    t.join()

time.sleep(1)
if len(errorMessageList)>0:
    log.errorReporter(errorMessageList)






===================

[DEFAULT]
siteId= 64159434
timeout = 5
retryTimeout = 5
serviceName = CSDS

#Reporting util props
## Example - logFilePath = D:\\logTest\\App1\\csds_monitor.log
logFilePath = /home/le-infra-monitoring/csds/csds_monitor.log
#logFileSize (in bytes)
logFileSize = 1000000
logFileBackupCount = 2

[ALPHA]
csdsDomain = va-a.adminlogin-test.int.liveperson.net
dcName = Alpha

[VIRGINIA]
csdsDomain = va.adminlogin-test.int.liveperson.net
dcName = Virginia

[OAKLAND]
csdsDomain = ca.adminlogin-test.int.liveperson.net
dcName = Oakland

[LONDON]
csdsDomain = lo.adminlogin-test.int.liveperson.net
dcName = London

[AMSTERDAM]
csdsDomain = am.adminlogin-test.int.liveperson.net
dcName = Amsterdam

[SYDNEY]
csdsDomain = sy.adminlogin-test.int.liveperson.net
dcName = Sydney

[MELBOURNE]
csdsDomain = me.adminlogin-test.int.liveperson.net
dcName = Melbourne



==============

__author__ = 'ronens'

class DataCenter:
    domain=None
    dcName=None

    # The class "constructor" - It's actually an initializer
    def __init__(self, domain, dcName):
        self.domain = domain
        self.dcName = dcName





